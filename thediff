405a406
> 		val.genCode();
433,438d433
< 		
< 	private boolean MustBeBoolean (Ast value){
< 		if ( value == PrimitiveType.BooleanType )
< 			return true;
< 		return false;
< 		}
440c435
< 	private Ast expression (SymbolTable sym) throws ParseException {
---
> 	private void expression (SymbolTable sym) throws ParseException {
442c437
< 		Ast argument1 = relExpression(sym);
---
> 		relExpression(sym);
445,454c440
< 			Ast argument2 = relExpression(sym);
< 			if (MustBeBoolean (argument1) && MustBeBoolean (argument2)){
< 				if lex.match("and")
< 					result = new BinaryNode(BinaryNode.and,
< 							PrimitiveType.BooleanType, result, right);
< 				else if lex.match("or")
< 					result = new BinaryNode(BinaryNode.or,
< 							PrimitiveType.BooleanType, result, right);
< 				}
< 			else throw new parseError(43);
---
> 			relExpression(sym);
457d442
< 		return null;
468c453
< 	private Ast relExpression (SymbolTable sym) throws ParseException {
---
> 	private void relExpression (SymbolTable sym) throws ParseException {
476d460
< 		return null;
479c463
< 	private Ast plusExpression (SymbolTable sym) throws ParseException {
---
> 	private void plusExpression (SymbolTable sym) throws ParseException {
487d470
< 		return null;
490c473
< 	private Ast timesExpression (SymbolTable sym) throws ParseException {
---
> 	private void timesExpression (SymbolTable sym) throws ParseException {
498d480
< 		return null;
501c483
< 	private Ast term (SymbolTable sym) throws ParseException {
---
> 	private void term (SymbolTable sym) throws ParseException {
536a519
> 			val.genCode();
548d530
< 		return null;
590c572,573
< 				Ast indexExpression = expression(sym);
---
> 				expression(sym);
> 				Ast indexExpression = new IntegerNode(42);
